<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightInject</name>
    </assembly>
    <members>
        <member name="T:LightInject.IServiceRegistry">
            <summary>
            Defines a set of methods used to register services into the service container.
            </summary>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(System.Type,System.Type,LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String,LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``2(LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``2(System.String,LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``1(LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(System.Type,LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``2(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``2(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param> 
            <param name="serviceName">The name of the service.</param>        
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``3(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``3(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``4(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``4(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``5(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3,``4}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``5(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3,``4}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}},LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="expression"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="expression">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="expression"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="expression">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>        
        </member>
        <member name="M:LightInject.IServiceRegistry.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}},System.String,LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="expression"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="expression">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>        
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{LightInject.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{LightInject.ServiceRequest,System.Object},LightInject.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Register(LightInject.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:LightInject.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:LightInject.ServiceRegistration"/> instance that contains service metadata.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>        
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{LightInject.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.IServiceRegistry.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:LightInject.ICompositionRoot"/> to register from.</typeparam>
        </member>
        <member name="M:LightInject.IServiceRegistry.Decorate(System.Type,System.Type,System.Func{LightInject.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>        
        </member>
        <member name="M:LightInject.IServiceRegistry.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
        </member>
        <member name="M:LightInject.IServiceRegistry.Decorate``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``0}})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
        </member>
        <member name="M:LightInject.IServiceRegistry.Decorate(LightInject.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:LightInject.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:LightInject.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
        </member>
        <member name="P:LightInject.IServiceRegistry.AvailableServices">
            <summary>
            Gets a list of <see cref="T:LightInject.ServiceRegistration"/> instances that represents the 
            registered services.          
            </summary>
        </member>
        <member name="T:LightInject.IServiceFactory">
            <summary>
            Defines a set of methods used to retrieve service instances.
            </summary>
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>        
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``1">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``1(System.String)">
            <summary>
            Gets a named instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``2(``0)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="value">The argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``2(``0,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="value">The argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``3(``0,``1)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``3(``0,``1,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``4(``0,``1,``2)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``4(``0,``1,``2,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``5(``0,``1,``2,``3)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.GetInstance``5(``0,``1,``2,``3,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.IServiceFactory.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.TryGetInstance``1">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.TryGetInstance``1(System.String)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:LightInject.IServiceFactory.GetAllInstances``1">
            <summary>
            Gets all instances of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of services to resolve.</typeparam>
            <returns>A list that contains all implementations of the <typeparamref name="TService"/> type.</returns>
        </member>
        <member name="T:LightInject.IServiceContainer">
            <summary>
            Represents an inversion of control container.
            </summary>
        </member>
        <member name="M:LightInject.IServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:LightInject.IServiceContainer.BeginScope">
            <summary>
            Starts a new <see cref="T:LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:LightInject.Scope"/></returns>
        </member>
        <member name="M:LightInject.IServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="T:LightInject.ILifetime">
            <summary>
            Represents a class that manages the lifetime of a service instance.
            </summary>
        </member>
        <member name="M:LightInject.ILifetime.GetInstance(System.Func{System.Object},LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:LightInject.ICompositionRoot">
            <summary>
            Represents a class that acts as a composition root for an <see cref="T:LightInject.IServiceRegistry"/> instance.
            </summary>
        </member>
        <member name="M:LightInject.ICompositionRoot.Compose(LightInject.IServiceRegistry)">
            <summary>
            Composes services by adding services to the <paramref name="serviceRegistry"/>.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:LightInject.IServiceRegistry"/>.</param>
        </member>
        <member name="T:LightInject.ITypeExtractor">
            <summary>
            Represents a class that extracts a set of types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:LightInject.ITypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:LightInject.IPropertySelector">
            <summary>
            Represents a class that is responsible for selecting injectable properties.
            </summary>
        </member>
        <member name="M:LightInject.IPropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of injectable properties.</returns>
        </member>
        <member name="T:LightInject.IPropertyDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:LightInject.IPropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:LightInject.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:LightInject.IConstructorDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:LightInject.IConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:LightInject.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:LightInject.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:LightInject.IConstructionInfoBuilder">
            <summary>
            Represents a class that is capable of building a <see cref="T:System.Reflection.ConstructorInfo"/> instance 
            based on a <see cref="T:LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:LightInject.IConstructionInfoBuilder.Execute(LightInject.Registration)">
            <summary>
            Returns a <see cref="T:LightInject.ConstructionInfo"/> instance based on the given <see cref="T:LightInject.Registration"/>.
            </summary>
            <param name="registration">The <see cref="T:LightInject.Registration"/> for which to return a <see cref="T:LightInject.ConstructionInfo"/> instance.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance that describes how to create a service instance.</returns>
        </member>
        <member name="T:LightInject.IConstructionInfoProvider">
            <summary>
            Represents a class that keeps track of a <see cref="T:LightInject.ConstructionInfo"/> instance for each <see cref="T:LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:LightInject.IConstructionInfoProvider.GetConstructionInfo(LightInject.Registration)">
            <summary>
            Gets a <see cref="T:LightInject.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:LightInject.Registration"/> for which to get a <see cref="T:LightInject.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:LightInject.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="M:LightInject.IConstructionInfoProvider.Invalidate">
            <summary>
            Invalidates the <see cref="T:LightInject.IConstructionInfoProvider"/> and causes new <see cref="T:LightInject.ConstructionInfo"/> instances 
            to be created when the <see cref="M:LightInject.IConstructionInfoProvider.GetConstructionInfo(LightInject.Registration)"/> method is called.
            </summary>
        </member>
        <member name="T:LightInject.ILambdaConstructionInfoBuilder">
            <summary>
            Represents a class that builds a <see cref="T:LightInject.ConstructionInfo"/> instance based on a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="M:LightInject.ILambdaConstructionInfoBuilder.Execute(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses the <paramref name="lambdaExpression"/> and returns a <see cref="T:LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="lambdaExpression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> to parse.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:LightInject.ITypeConstructionInfoBuilder">
            <summary>
            Represents a class that builds a <see cref="T:LightInject.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:LightInject.ITypeConstructionInfoBuilder.Execute(System.Type)">
            <summary>
            Analyzes the <paramref name="implementingType"/> and returns a <see cref="T:LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> to analyze.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:LightInject.IConstructorSelector">
            <summary>
            Represents a class that selects the constructor to be used for creating a new service instance. 
            </summary>
        </member>
        <member name="M:LightInject.IConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:LightInject.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="T:LightInject.IAssemblyLoader">
            <summary>
            Represents a class that is responsible loading a set of assemblies based on the given search pattern.
            </summary>
        </member>
        <member name="M:LightInject.IAssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="T:LightInject.IAssemblyScanner">
            <summary>
            Represents a class that is capable of scanning an assembly and register services into an <see cref="T:LightInject.IServiceContainer"/> instance.
            </summary>
        </member>
        <member name="M:LightInject.IAssemblyScanner.Scan(System.Reflection.Assembly,LightInject.IServiceRegistry,System.Func{LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>        
            <param name="serviceRegistry">The target <see cref="T:LightInject.IServiceRegistry"/> instance.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
        </member>
        <member name="M:LightInject.IAssemblyScanner.Scan(System.Reflection.Assembly,LightInject.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>        
            <param name="serviceRegistry">The target <see cref="T:LightInject.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:LightInject.ICompositionRootExecutor">
            <summary>
            Represents a class that is responsible for instantiating and executing an <see cref="T:LightInject.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:LightInject.ICompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:LightInject.ICompositionRoot.Compose(LightInject.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:LightInject.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:LightInject.IMethodSkeleton">
            <summary>
            Represents a dynamic method skeleton for emitting the code needed to resolve a service instance.
            </summary>
        </member>
        <member name="M:LightInject.IMethodSkeleton.GetILGenerator">
            <summary>
            Gets the <see cref="T:LightInject.ILGenerator"/> for the this dynamic method.
            </summary>
            <returns>The <see cref="T:LightInject.ILGenerator"/> for the this dynamic method.</returns>        
        </member>
        <member name="M:LightInject.IMethodSkeleton.CreateDelegate(System.Type)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it.
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
        </member>
        <member name="M:LightInject.IMethodSkeleton.CreateDelegate(System.Type,System.Object)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it, 
            specifying the delegate type and an object the delegate is bound to.
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</param>
            <param name="target">An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</returns>
        </member>
        <member name="T:LightInject.ServiceContainer">
            <summary>
            An ultra lightweight service container.
            </summary>
        </member>
        <member name="M:LightInject.ServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:LightInject.ServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.BeginScope">
            <summary>
            Starts a new <see cref="T:LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:LightInject.Scope"/></returns>
        </member>
        <member name="M:LightInject.ServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}},System.String,LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="expression"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="expression">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>        
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{LightInject.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{LightInject.ServiceRequest,System.Object},LightInject.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(LightInject.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:LightInject.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:LightInject.ServiceRegistration"/> instance that contains service metadata.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>        
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>             
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{LightInject.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:LightInject.ICompositionRoot"/> interface, this 
            will be used to configure the container.
            </remarks>     
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:LightInject.ICompositionRoot"/> to register from.</typeparam>
        </member>
        <member name="M:LightInject.ServiceContainer.Decorate(System.Type,System.Type,System.Func{LightInject.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>        
        </member>
        <member name="M:LightInject.ServiceContainer.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
        </member>
        <member name="M:LightInject.ServiceContainer.Decorate``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``0}})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Decorate(LightInject.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:LightInject.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:LightInject.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(System.Type,System.Type,LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(System.Type,System.Type,System.String,LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``2(LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``2(System.String,LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}},LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>        
        </member>
        <member name="M:LightInject.ServiceContainer.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(System.Type,LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``1(LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>. 
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``1(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>       
        </member>
        <member name="M:LightInject.ServiceContainer.Register``2(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.ServiceContainer.Register``2(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param> 
            <param name="serviceName">The name of the service.</param>        
        </member>
        <member name="M:LightInject.ServiceContainer.Register``3(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.ServiceContainer.Register``3(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``4(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.ServiceContainer.Register``4(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register``5(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3,``4}})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
        </member>
        <member name="M:LightInject.ServiceContainer.Register``5(System.Linq.Expressions.Expression{System.Func{LightInject.IServiceFactory,``0,``1,``2,``3,``4}},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that 
            describes the dependencies of the service. 
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>        
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>    
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>        
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``1">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``1(System.String)">
            <summary>
            Gets a named instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``2(``0)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="value">The argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``2(``0,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="value">The argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``3(``0,``1)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``3(``0,``1,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``4(``0,``1,``2)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``4(``0,``1,``2,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``5(``0,``1,``2,``3)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance``5(``0,``1,``2,``3,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>        
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>    
        </member>
        <member name="M:LightInject.ServiceContainer.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.TryGetInstance``1">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.TryGetInstance``1(System.String)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.GetAllInstances``1">
            <summary>
            Gets all instances of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of services to resolve.</typeparam>
            <returns>A list that contains all implementations of the <typeparamref name="TService"/> type.</returns>
        </member>
        <member name="M:LightInject.ServiceContainer.Dispose">
            <summary>
            Disposes any services registered using the <see cref="T:LightInject.PerContainerLifetime"/>.
            </summary>
        </member>
        <member name="P:LightInject.ServiceContainer.PropertyDependencySelector">
            <summary>
            Gets or sets the <see cref="T:LightInject.IPropertyDependencySelector"/> instance that 
            is responsible for selecting the property dependencies for a given type.
            </summary>
        </member>
        <member name="P:LightInject.ServiceContainer.ConstructorDependencySelector">
            <summary>
            Gets or sets the <see cref="T:LightInject.IConstructorDependencySelector"/> instance that 
            is responsible for selecting the constructor dependencies for a given constructor.
            </summary>
        </member>
        <member name="P:LightInject.ServiceContainer.ConstructorSelector">
            <summary>
            Gets or sets the <see cref="T:LightInject.IConstructorSelector"/> instance that is responsible 
            for selecting the constructor to be used when creating new service instances.
            </summary>
        </member>
        <member name="P:LightInject.ServiceContainer.AssemblyScanner">
            <summary>
            Gets or sets the <see cref="T:LightInject.IAssemblyScanner"/> instance that is responsible for scanning assemblies.
            </summary>
        </member>
        <member name="P:LightInject.ServiceContainer.AvailableServices">
            <summary>
            Gets a list of <see cref="T:LightInject.ServiceRegistration"/> instances that represents the registered services.           
            </summary>                  
        </member>
        <member name="T:LightInject.ThreadSafeDictionary`2">
            <summary>
            A thread safe dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:LightInject.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ThreadSafeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:LightInject.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ThreadSafeDictionary`2"/> class using the 
            given <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys</param>
        </member>
        <member name="T:LightInject.OpCodes">
            <summary>
            Provides field representations of the Microsoft Intermediate Language (MSIL) instructions.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldarg_0">
            <summary>
            Loads the argument at index 0 onto the evaluation stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldc_I4">
            <summary>
            Pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldelem_Ref">
            <summary>
            Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type O (object reference).
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Castclass">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Newarr">
            <summary>
            Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Stloc">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldloc">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack.
            </summary>        
        </member>
        <member name="F:LightInject.OpCodes.Newobj">
            <summary>
            Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Unbox_Any">
            <summary>
            Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Stelem">
            <summary>
            Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Box">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Callvirt">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Call">
            <summary>
            Calls the method indicated by the passed method descriptor.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldlen">
            <summary>
            Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Conv_I4">
            <summary>
            Converts the value on top of the evaluation stack to int32.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Sub">
            <summary>
            Subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldc_I4_1">
            <summary>
            Pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldstr">
            <summary>
            Pushes a new object reference to a string literal stored in the metadata.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ldarg">
            <summary>
            Loads an argument (referenced by a specified index value) onto the stack.
            </summary>
        </member>
        <member name="F:LightInject.OpCodes.Ret">
            <summary>
            Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.
            </summary>
        </member>
        <member name="T:LightInject.OpCode">
            <summary>
            Describes a Microsoft intermediate language (MSIL) instruction.
            </summary>
        </member>
        <member name="M:LightInject.OpCode.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.OpCode"/> struct.
            </summary>
            <param name="value">The value that identifies this <see cref="T:LightInject.OpCode"/>.</param>
        </member>
        <member name="M:LightInject.OpCode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:LightInject.OpCode.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:LightInject.OpCode.op_Equality(LightInject.OpCode,LightInject.OpCode)">
            <summary>
            Overloads the equals operator.
            </summary>
            <param name="a">The left-hand <see cref="T:LightInject.OpCode"/>.</param>
            <param name="b">The right-hand <see cref="T:LightInject.OpCode"/>.</param>
            <returns>true if <paramref name="a"/> is equal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:LightInject.OpCode.op_Inequality(LightInject.OpCode,LightInject.OpCode)">
            <summary>
            Overloads the not equals operator.
            </summary>
            <param name="a">The left-hand <see cref="T:LightInject.OpCode"/>.</param>
            <param name="b">The right-hand <see cref="T:LightInject.OpCode"/>.</param>
            <returns>true if <paramref name="a"/> is not equal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="P:LightInject.OpCode.Value">
            <summary>
            Gets a <see cref="T:System.Int16"/> value that identifies this <see cref="T:LightInject.OpCode"/>.
            </summary>
        </member>
        <member name="T:LightInject.DynamicMethod">
            <summary>
            Defines and represents a dynamic method that can be compiled and executed.
            </summary>    
        </member>
        <member name="M:LightInject.DynamicMethod.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.DynamicMethod"/> class.
            </summary>
            <param name="returnType">A <see cref="T:System.Type"/> object that specifies the return type of the dynamic method.</param>
            <param name="parameterTypes">An array of <see cref="T:System.Type"/> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters.</param>
        </member>
        <member name="M:LightInject.DynamicMethod.CreateDelegate(System.Type)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
        </member>
        <member name="M:LightInject.DynamicMethod.CreateDelegate(System.Type,System.Object)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</param>
            <param name="target">An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</returns>
        </member>
        <member name="M:LightInject.DynamicMethod.GetILGenerator">
            <summary>
            Returns a <see cref="T:LightInject.ILGenerator"/> for the method
            </summary>
            <returns>An <see cref="T:LightInject.ILGenerator"/> object for the method.</returns>
        </member>
        <member name="T:LightInject.ILGenerator">
            <summary>
            A generator that transforms <see cref="T:LightInject.OpCodes"/> into an expression tree.
            </summary>
        </member>
        <member name="M:LightInject.ILGenerator.#ctor(System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ILGenerator"/> class.
            </summary>
            <param name="parameters">An array of parameters used by the target <see cref="T:LightInject.DynamicMethod"/>.</param>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode,LightInject.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode,System.String)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="arg">The String to be emitted.</param>
        </member>
        <member name="M:LightInject.ILGenerator.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:LightInject.ILGenerator.Emit(LightInject.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="P:LightInject.ILGenerator.CurrentExpression">
            <summary>
            Gets the current expression based the emitted <see cref="T:LightInject.OpCodes"/>. 
            </summary>
        </member>
        <member name="T:LightInject.LocalBuilder">
            <summary>
            Represents a local variable within a method or constructor.
            </summary>
        </member>
        <member name="M:LightInject.LocalBuilder.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.LocalBuilder"/> class.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the variable that this <see cref="T:LightInject.LocalBuilder"/> represents.</param>
        </member>
        <member name="P:LightInject.LocalBuilder.Variable">
            <summary>
            Gets the <see cref="T:System.Linq.Expressions.ParameterExpression"/> that represents the variable.
            </summary>
        </member>
        <member name="T:LightInject.MostResolvableConstructorSelector">
            <summary>
            Selects the <see cref="T:LightInject.ConstructionInfo"/> from a given type that represents the most resolvable constructor.
            </summary>
        </member>
        <member name="M:LightInject.MostResolvableConstructorSelector.#ctor(System.Func{System.Type,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.MostResolvableConstructorSelector"/> class.
            </summary>
            <param name="canGetInstance">A function delegate that determines if a service type can be resolved.</param>
        </member>
        <member name="M:LightInject.MostResolvableConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:LightInject.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="M:LightInject.MostResolvableConstructorSelector.GetServiceName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the service name based on the given <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for which to get the service name.</param>
            <returns>The name of the service for the given <paramref name="parameter"/>.</returns>
        </member>
        <member name="T:LightInject.ConstructorDependencySelector">
            <summary>
            Selects the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:LightInject.ConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:LightInject.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:LightInject.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:LightInject.PropertyDependencySelector">
            <summary>
            Selects the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:LightInject.PropertyDependencySelector.#ctor(LightInject.IPropertySelector)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.PropertyDependencySelector"/> class.
            </summary>
            <param name="propertySelector">The <see cref="T:LightInject.IPropertySelector"/> that is 
            responsible for selecting a list of injectable properties.</param>
        </member>
        <member name="M:LightInject.PropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:LightInject.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="P:LightInject.PropertyDependencySelector.PropertySelector">
            <summary>
            Gets the <see cref="T:LightInject.IPropertySelector"/> that is responsible for selecting a 
            list of injectable properties.
            </summary>
        </member>
        <member name="T:LightInject.TypeConstructionInfoBuilder">
            <summary>
            Builds a <see cref="T:LightInject.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:LightInject.TypeConstructionInfoBuilder.#ctor(LightInject.IConstructorSelector,LightInject.IConstructorDependencySelector,LightInject.IPropertyDependencySelector)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.TypeConstructionInfoBuilder"/> class.
            </summary>
            <param name="constructorSelector">The <see cref="T:LightInject.IConstructorSelector"/> that is responsible
            for selecting the constructor to be used for constructor injection.</param>
            <param name="constructorDependencySelector">The <see cref="T:LightInject.IConstructorDependencySelector"/> that is 
            responsible for selecting the constructor dependencies for a given <see cref="T:LightInject.ConstructionInfo"/>.</param>
            <param name="propertyDependencySelector">The <see cref="T:LightInject.IPropertyDependencySelector"/> that is responsible
            for selecting the property dependencies for a given <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:LightInject.TypeConstructionInfoBuilder.Execute(System.Type)">
            <summary>
            Analyzes the <paramref name="implementingType"/> and returns a <see cref="T:LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> to analyze.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:LightInject.ConstructionInfoProvider">
            <summary>
            Keeps track of a <see cref="T:LightInject.ConstructionInfo"/> instance for each <see cref="T:LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:LightInject.ConstructionInfoProvider.#ctor(LightInject.IConstructionInfoBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ConstructionInfoProvider"/> class.
            </summary>
            <param name="constructionInfoBuilder">The <see cref="T:LightInject.IConstructionInfoBuilder"/> that 
            is responsible for building a <see cref="T:LightInject.ConstructionInfo"/> instance based on a given <see cref="T:LightInject.Registration"/>.</param>
        </member>
        <member name="M:LightInject.ConstructionInfoProvider.GetConstructionInfo(LightInject.Registration)">
            <summary>
            Gets a <see cref="T:LightInject.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:LightInject.Registration"/> for which to get a <see cref="T:LightInject.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:LightInject.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="M:LightInject.ConstructionInfoProvider.Invalidate">
            <summary>
            Invalidates the <see cref="T:LightInject.IConstructionInfoProvider"/> and causes new <see cref="T:LightInject.ConstructionInfo"/> instances 
            to be created when the <see cref="M:LightInject.IConstructionInfoProvider.GetConstructionInfo(LightInject.Registration)"/> method is called.
            </summary>
        </member>
        <member name="T:LightInject.ConstructionInfoBuilder">
            <summary>
            Provides a <see cref="T:System.Reflection.ConstructorInfo"/> instance 
            that describes how to create a service instance.
            </summary>
        </member>
        <member name="M:LightInject.ConstructionInfoBuilder.#ctor(System.Func{LightInject.ILambdaConstructionInfoBuilder},System.Func{LightInject.ITypeConstructionInfoBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ConstructionInfoBuilder"/> class.             
            </summary>
            <param name="lambdaConstructionInfoBuilderFactory">
            A function delegate used to provide a <see cref="T:LightInject.ILambdaConstructionInfoBuilder"/> instance.
            </param>
            <param name="typeConstructionInfoBuilderFactory">
            A function delegate used to provide a <see cref="T:LightInject.ITypeConstructionInfoBuilder"/> instance.
            </param>
        </member>
        <member name="M:LightInject.ConstructionInfoBuilder.Execute(LightInject.Registration)">
            <summary>
            Returns a <see cref="T:LightInject.ConstructionInfo"/> instance based on the given <see cref="T:LightInject.Registration"/>.
            </summary>
            <param name="registration">The <see cref="T:LightInject.Registration"/> for which to return a <see cref="T:LightInject.ConstructionInfo"/> instance.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance that describes how to create a service instance.</returns>
        </member>
        <member name="T:LightInject.LambdaConstructionInfoBuilder">
            <summary>
            Parses a <see cref="T:System.Linq.Expressions.LambdaExpression"/> into a <see cref="T:LightInject.ConstructionInfo"/> instance.
            </summary>
        </member>
        <member name="M:LightInject.LambdaConstructionInfoBuilder.Execute(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses the <paramref name="lambdaExpression"/> and returns a <see cref="T:LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="lambdaExpression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> to parse.</param>
            <returns>A <see cref="T:LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:LightInject.LambdaExpressionValidator">
            <summary>
            Inspects the body of a <see cref="T:System.Linq.Expressions.LambdaExpression"/> and determines if the expression can be parsed.
            </summary>
        </member>
        <member name="M:LightInject.LambdaExpressionValidator.CanParse(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Determines if the <paramref name="lambdaExpression"/> can be parsed.
            </summary>
            <param name="lambdaExpression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> to validate.</param>
            <returns><b>true</b>, if the expression can be parsed, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:LightInject.LambdaExpressionValidator.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-expression was modified; otherwise, returns the original expression.
            </returns>
            <param name="node">The expression to visit.</param><typeparam name="T">The type of the delegate.</typeparam>
        </member>
        <member name="M:LightInject.LambdaExpressionValidator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-expression was modified; otherwise, returns the original expression.
            </returns>
            <param name="node">The expression to visit.</param>
        </member>
        <member name="T:LightInject.ServiceRequest">
            <summary>
            Contains information about a service request that originates from a rule based service registration.
            </summary>    
        </member>
        <member name="M:LightInject.ServiceRequest.#ctor(System.Type,System.String,LightInject.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ServiceRequest"/> class.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="serviceFactory">The <see cref="T:LightInject.IServiceFactory"/> to be associated with this <see cref="T:LightInject.ServiceRequest"/>.</param>
        </member>
        <member name="P:LightInject.ServiceRequest.ServiceType">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:LightInject.ServiceRequest.ServiceName">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="P:LightInject.ServiceRequest.ServiceFactory">
            <summary>
            Gets the <see cref="T:LightInject.IServiceFactory"/> that is associated with this <see cref="T:LightInject.ServiceRequest"/>.
            </summary>
        </member>
        <member name="T:LightInject.Registration">
            <summary>
            Base class for concrete registrations within the service container.
            </summary>
        </member>
        <member name="P:LightInject.Registration.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:LightInject.Registration.ImplementingType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the <see cref="P:LightInject.Registration.ServiceType"/>.
            </summary>
        </member>
        <member name="P:LightInject.Registration.FactoryExpression">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Expressions.LambdaExpression"/> used to create a service instance.
            </summary>
        </member>
        <member name="T:LightInject.DecoratorRegistration">
            <summary>
            Contains information about a registered decorator.
            </summary>
        </member>
        <member name="P:LightInject.DecoratorRegistration.CanDecorate">
            <summary>
            Gets or sets a function delegate that determines if the decorator can decorate the service 
            represented by the supplied <see cref="T:LightInject.ServiceRegistration"/>.
            </summary>
        </member>
        <member name="P:LightInject.DecoratorRegistration.ImplementingTypeFactory">
            <summary>
            Gets or sets a <see cref="T:System.Lazy`1"/> that defers resolving of the decorators implementing type.
            </summary>
        </member>
        <member name="P:LightInject.DecoratorRegistration.Index">
            <summary>
            Gets or sets the index of this <see cref="T:LightInject.DecoratorRegistration"/>.
            </summary>
        </member>
        <member name="T:LightInject.ServiceRegistration">
            <summary>
            Contains information about a registered service.
            </summary>
        </member>
        <member name="M:LightInject.ServiceRegistration.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LightInject.ServiceRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:LightInject.ServiceRegistration.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:LightInject.ServiceRegistration.Lifetime">
            <summary>
            Gets or sets the <see cref="T:LightInject.ILifetime"/> instance that controls the lifetime of the service.
            </summary>
        </member>
        <member name="P:LightInject.ServiceRegistration.Value">
            <summary>
            Gets or sets the value that represents the instance of the service.
            </summary>
        </member>
        <member name="P:LightInject.ServiceRegistration.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:LightInject.ServiceRegistration"/> can be overridden 
            by another registration.
            </summary>
        </member>
        <member name="T:LightInject.ConstructionInfo">
            <summary>
            Contains information about how to create a service instance.
            </summary>
        </member>
        <member name="M:LightInject.ConstructionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.ConstructionInfo"/> class.
            </summary>
        </member>
        <member name="P:LightInject.ConstructionInfo.ImplementingType">
            <summary>
            Gets or sets the implementing type that represents the concrete class to create.
            </summary>
        </member>
        <member name="P:LightInject.ConstructionInfo.Constructor">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ConstructorInfo"/> that is used to create a service instance.
            </summary>
        </member>
        <member name="P:LightInject.ConstructionInfo.PropertyDependencies">
            <summary>
            Gets a list of <see cref="T:LightInject.PropertyDependency"/> instances that represent 
            the property dependencies for the target service instance. 
            </summary>
        </member>
        <member name="P:LightInject.ConstructionInfo.ConstructorDependencies">
            <summary>
            Gets a list of <see cref="T:LightInject.ConstructorDependency"/> instances that represent 
            the property dependencies for the target service instance. 
            </summary>
        </member>
        <member name="P:LightInject.ConstructionInfo.FactoryDelegate">
            <summary>
            Gets or sets the function delegate to be used to create the service instance.
            </summary>
        </member>
        <member name="T:LightInject.Dependency">
            <summary>
            Represents a class dependency.
            </summary>
        </member>
        <member name="M:LightInject.Dependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="P:LightInject.Dependency.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/> of the <see cref="T:LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:LightInject.Dependency.ServiceName">
            <summary>
            Gets or sets the service name of the <see cref="T:LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:LightInject.Dependency.FactoryExpression">
            <summary>
            Gets or sets the <see cref="P:LightInject.Dependency.FactoryExpression"/> that represent getting the value of the <see cref="T:LightInject.Dependency"/>.
            </summary>            
        </member>
        <member name="P:LightInject.Dependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="P:LightInject.Dependency.IsRequired">
            <summary>
            Gets or sets a value indicating whether this dependency is required.
            </summary>
        </member>
        <member name="T:LightInject.PropertyDependency">
            <summary>
            Represents a property dependency.
            </summary>
        </member>
        <member name="M:LightInject.PropertyDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="P:LightInject.PropertyDependency.Property">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo"/> that is used to set the property value.
            </summary>
        </member>
        <member name="P:LightInject.PropertyDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="T:LightInject.ConstructorDependency">
            <summary>
            Represents a constructor dependency.
            </summary>
        </member>
        <member name="M:LightInject.ConstructorDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="P:LightInject.ConstructorDependency.Parameter">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ParameterInfo"/> for this <see cref="T:LightInject.ConstructorDependency"/>.
            </summary>
        </member>
        <member name="P:LightInject.ConstructorDependency.IsDecoratorTarget">
            <summary>
            Gets or sets a value indicating whether that this parameter represents  
            the decoration target passed into a decorator instance. 
            </summary>
        </member>
        <member name="P:LightInject.ConstructorDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="T:LightInject.PerContainerLifetime">
            <summary>
            Ensures that only one instance of a given service can exist within the current <see cref="T:LightInject.IServiceContainer"/>.
            </summary>
        </member>
        <member name="M:LightInject.PerContainerLifetime.GetInstance(System.Func{System.Object},LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="M:LightInject.PerContainerLifetime.Dispose">
            <summary>
            Disposes the service instances managed by this <see cref="T:LightInject.PerContainerLifetime"/> instance.
            </summary>
        </member>
        <member name="T:LightInject.PerRequestLifeTime">
            <summary>
            Ensures that a new instance is created for each request in addition to tracking disposable instances.
            </summary>
        </member>
        <member name="M:LightInject.PerRequestLifeTime.GetInstance(System.Func{System.Object},LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:LightInject.PerScopeLifetime">
            <summary>
            Ensures that only one service instance can exist within a given <see cref="T:LightInject.Scope"/>.
            </summary>
            <remarks>
            If the service instance implements <see cref="T:System.IDisposable"/>, 
            it will be disposed when the <see cref="T:LightInject.Scope"/> ends.
            </remarks>
        </member>
        <member name="M:LightInject.PerScopeLifetime.GetInstance(System.Func{System.Object},LightInject.Scope)">
            <summary>
            Returns the same service instance within the current <see cref="T:LightInject.Scope"/>.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:LightInject.ScopeManager">
            <summary>
            Manages a set of <see cref="T:LightInject.Scope"/> instances.
            </summary>
        </member>
        <member name="M:LightInject.ScopeManager.BeginScope">
            <summary>
            Starts a new <see cref="T:LightInject.Scope"/>. 
            </summary>
            <returns>A new <see cref="T:LightInject.Scope"/>.</returns>
        </member>
        <member name="M:LightInject.ScopeManager.EndScope(LightInject.Scope)">
            <summary>
            Ends the given <paramref name="scope"/> and updates the <see cref="P:LightInject.ScopeManager.CurrentScope"/> property.
            </summary>
            <param name="scope">The scope that is completed.</param>
        </member>
        <member name="P:LightInject.ScopeManager.CurrentScope">
            <summary>
            Gets the current <see cref="T:LightInject.Scope"/>.
            </summary>
        </member>
        <member name="T:LightInject.Scope">
            <summary>
            Represents a scope. 
            </summary>
        </member>
        <member name="M:LightInject.Scope.#ctor(LightInject.ScopeManager,LightInject.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.Scope"/> class.
            </summary>
            <param name="scopeManager">The <see cref="F:LightInject.Scope.scopeManager"/> that manages this <see cref="T:LightInject.Scope"/>.</param>
            <param name="parentScope">The parent <see cref="T:LightInject.Scope"/>.</param>
        </member>
        <member name="M:LightInject.Scope.TrackInstance(System.IDisposable)">
            <summary>
            Registers the <paramref name="disposable"/> so that it is disposed when the scope is completed.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> object to register.</param>
        </member>
        <member name="M:LightInject.Scope.Dispose">
            <summary>
            Disposes all instances tracked by this scope.
            </summary>
        </member>
        <member name="E:LightInject.Scope.Completed">
            <summary>
            Raised when the <see cref="T:LightInject.Scope"/> is completed.
            </summary>
        </member>
        <member name="P:LightInject.Scope.ParentScope">
            <summary>
            Gets or sets the parent <see cref="T:LightInject.Scope"/>.
            </summary>
        </member>
        <member name="P:LightInject.Scope.ChildScope">
            <summary>
            Gets or sets the child <see cref="T:LightInject.Scope"/>.
            </summary>
        </member>
        <member name="T:LightInject.CompositionRootTypeAttribute">
            <summary>
            Used at the assembly level to describe the composition root(s) for the target assembly.
            </summary>
        </member>
        <member name="M:LightInject.CompositionRootTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.CompositionRootTypeAttribute"/> class.
            </summary>
            <param name="compositionRootType">A <see cref="T:System.Type"/> that implements the <see cref="T:LightInject.ICompositionRoot"/> interface.</param>
        </member>
        <member name="P:LightInject.CompositionRootTypeAttribute.CompositionRootType">
            <summary>
            Gets the <see cref="T:System.Type"/> that implements the <see cref="T:LightInject.ICompositionRoot"/> interface.
            </summary>
        </member>
        <member name="T:LightInject.CompositionRootTypeExtractor">
            <summary>
            Extracts concrete <see cref="T:LightInject.ICompositionRoot"/> implementations from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:LightInject.CompositionRootTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete <see cref="T:LightInject.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete <see cref="T:LightInject.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:LightInject.CachedTypeExtractor">
            <summary>
            A <see cref="T:LightInject.ITypeExtractor"/> cache decorator.
            </summary>
        </member>
        <member name="M:LightInject.CachedTypeExtractor.#ctor(LightInject.ITypeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.CachedTypeExtractor"/> class.
            </summary>
            <param name="typeExtractor">The target <see cref="T:LightInject.ITypeExtractor"/>.</param>
        </member>
        <member name="M:LightInject.CachedTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:LightInject.ConcreteTypeExtractor">
            <summary>
            Extracts concrete types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:LightInject.ConcreteTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:LightInject.CompositionRootExecutor">
            <summary>
            A class that is responsible for instantiating and executing an <see cref="T:LightInject.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:LightInject.CompositionRootExecutor.#ctor(LightInject.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.CompositionRootExecutor"/> class.
            </summary>
            <param name="serviceRegistry">The <see cref="T:LightInject.IServiceRegistry"/> to be configured by the <see cref="T:LightInject.ICompositionRoot"/>.</param>
        </member>
        <member name="M:LightInject.CompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:LightInject.ICompositionRoot.Compose(LightInject.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:LightInject.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:LightInject.AssemblyScanner">
            <summary>
            An assembly scanner that registers services based on the types contained within an <see cref="T:System.Reflection.Assembly"/>.
            </summary>    
        </member>
        <member name="M:LightInject.AssemblyScanner.#ctor(LightInject.ITypeExtractor,LightInject.ITypeExtractor,LightInject.ICompositionRootExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.AssemblyScanner"/> class.
            </summary>
            <param name="concreteTypeExtractor">The <see cref="T:LightInject.ITypeExtractor"/> that is responsible for 
            extracting concrete types from the assembly being scanned.</param>
            <param name="compositionRootTypeExtractor">The <see cref="T:LightInject.ITypeExtractor"/> that is responsible for 
            extracting <see cref="T:LightInject.ICompositionRoot"/> implementations from the assembly being scanned.</param>
            <param name="compositionRootExecutor">The <see cref="T:LightInject.ICompositionRootExecutor"/> that is 
            responsible for creating and executing an <see cref="T:LightInject.ICompositionRoot"/>.</param>
        </member>
        <member name="M:LightInject.AssemblyScanner.Scan(System.Reflection.Assembly,LightInject.IServiceRegistry,System.Func{LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>        
            <param name="serviceRegistry">The target <see cref="T:LightInject.IServiceRegistry"/> instance.</param>
            <param name="lifetimeFactory">The <see cref="T:LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
        </member>
        <member name="M:LightInject.AssemblyScanner.Scan(System.Reflection.Assembly,LightInject.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>        
            <param name="serviceRegistry">The target <see cref="T:LightInject.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:LightInject.PropertySelector">
            <summary>
            Selects the properties that represents a dependency to the target <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:LightInject.PropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of properties that represents a dependency to the target <paramref name="type"/></returns>
        </member>
        <member name="M:LightInject.PropertySelector.IsInjectable(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the <paramref name="propertyInfo"/> represents an injectable property.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> that describes the target property.</param>
            <returns><b>true</b> if the property is injectable, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:LightInject.LazyReadOnlyCollection`1">
            <summary>
            Represents a read-only collection that is initialized with a lazy <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of values in the collection.</typeparam>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.#ctor(System.Lazy{System.Collections.Generic.IEnumerable{`0}},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.LazyReadOnlyCollection`1"/> class.
            </summary>
            <param name="lazyEnumerable">A lazy <see cref="T:System.Collections.Generic.IEnumerable`1"/> that represents the elements in the collection.</param>
            <param name="count">The number of elements in the <paramref name="lazyEnumerable"/>.</param>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            True if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:LightInject.LazyReadOnlyCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            True if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:LightInject.LazyReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:LightInject.LazyReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
    </members>
</doc>
