<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Labo.Common</name>
    </assembly>
    <members>
        <member name="T:Labo.Common.Comparer.ComparerReverser`1">
            <summary>
            ComparerReverser class
            </summary>
            <typeparam name="TItem">Item type for comparison</typeparam>
        </member>
        <member name="F:Labo.Common.Comparer.ComparerReverser`1.m_WrappedComparer">
            <summary>
            The wrapped comparer.
            </summary>
        </member>
        <member name="M:Labo.Common.Comparer.ComparerReverser`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Comparer.ComparerReverser`1"/> class.
            </summary>
            <param name="wrappedComparer">The wrapped comparer.</param>
            <exception cref="T:System.ArgumentNullException">wrappedComparer</exception>
        </member>
        <member name="M:Labo.Common.Comparer.ComparerReverser`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="T:Labo.Common.Patterns.DateTimeProvider">
            <summary>
            Date time provider class.
            </summary>
        </member>
        <member name="F:Labo.Common.Patterns.DateTimeProvider.s_DateTimeProvider">
            <summary>
            The date time provider object.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.DateTimeProvider.ResetDateTimeProvider">
            <summary>
            Resets the date time provider to its default value.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.DateTimeProvider.SetDateTimeProvider(Labo.Common.Patterns.IDateTimeProvider)">
            <summary>
            Sets the date time provider.
            </summary>
            <param name="dateTimeProvider">The date time provider.</param>
        </member>
        <member name="P:Labo.Common.Patterns.DateTimeProvider.Current">
            <summary>
            Gets the current DateTimeProvider.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="T:Labo.Common.Patterns.DateTimeProviderContext">
            <summary>
            Date time provider context.
            </summary>
        </member>
        <member name="F:Labo.Common.Patterns.DateTimeProviderContext.m_DateTimeProvider">
            <summary>
            The date time provider
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.DateTimeProviderContext.#ctor(Labo.Common.Patterns.IDateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.DateTimeProviderContext"/> class.
            </summary>
            <param name="dateTimeProvider">The date time provider.</param>
            <exception cref="T:System.ArgumentNullException">dateTimeProvider</exception>
        </member>
        <member name="M:Labo.Common.Patterns.DateTimeProviderContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Labo.Common.Patterns.Disposable`1">
            <summary>
            Disposable object class.
            </summary>
            <typeparam name="TInstance">Disposable instance.</typeparam>
        </member>
        <member name="F:Labo.Common.Patterns.Disposable`1.m_DisposableCreator">
            <summary>
            The disposable instance creator.
            </summary>
        </member>
        <member name="F:Labo.Common.Patterns.Disposable`1.m_DisposableInstance">
            <summary>
            The disposable object instance.
            </summary>
        </member>
        <member name="F:Labo.Common.Patterns.Disposable`1.m_DisposableObjectCreationStack">
            <summary>
            The disposable object creation stack.
            </summary>
        </member>
        <member name="F:Labo.Common.Patterns.Disposable`1.m_Disposed">
            <summary>
            The disposed flag.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.Disposable`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.Disposable`1"/> class.
            </summary>
            <param name="disposableCreator">The disposable creator.</param>
            <exception cref="T:System.ArgumentNullException">disposableCreator</exception>
        </member>
        <member name="M:Labo.Common.Patterns.Disposable`1.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.Disposable`1.Using">
            <summary>
            Usings this instance.
            </summary>
            <returns>Disposable object.</returns>
        </member>
        <member name="M:Labo.Common.Patterns.Disposable`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Labo.Common.Patterns.Disposable`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Labo.Common.Patterns.Disposable`1.GetOrCreateInstance">
            <summary>
            Gets the or create instance.
            </summary>
            <returns>Disposable object instance.</returns>
        </member>
        <member name="P:Labo.Common.Patterns.Disposable`1.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException">
            <summary>
            Factory create instance exception.
            </summary>
        </member>
        <member name="T:Labo.Common.Exceptions.CoreLevelException">
            <summary>
            Core level exception.
            </summary>
        </member>
        <member name="T:Labo.Common.Exceptions.ApplicationBaseException">
            <summary>
            Base application exception.
            </summary>
        </member>
        <member name="F:Labo.Common.Exceptions.ApplicationBaseException.m_Guid">
            <summary>
            The exception GUID.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.ApplicationBaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.ApplicationBaseException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.ApplicationBaseException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.ApplicationBaseException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.ApplicationBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.ApplicationBaseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.ApplicationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.ApplicationBaseException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.ApplicationBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.ApplicationBaseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.ApplicationBaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception> 
            <PermissionSet>
             <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Labo.Common.Exceptions.ApplicationBaseException.Guid">
            <summary>
            Gets the exception GUID.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.CoreLevelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CoreLevelException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.CoreLevelException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CoreLevelException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CoreLevelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CoreLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CoreLevelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CoreLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CoreLevelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CoreLevelException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CoreLevelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>  
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:Labo.Common.Patterns.Exception.FactoryCreateInstanceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.Exception.FactoryCreateInstanceException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Patterns.Exception.FactoryCreateInstanceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Patterns.Exception.FactoryCreateInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Patterns.Exception.FactoryCreateInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Patterns.Exception.FactoryCreateInstanceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Patterns.Factory`2">
            <summary>
            Factory base class.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TInstance">The type of the instance.</typeparam>
        </member>
        <member name="F:Labo.Common.Patterns.Factory`2.s_Dictionary">
            <summary>
            The registration dictionary
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.Factory`2.Create(`0)">
            <summary>
            Creates new TInstance using the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>new TInstance</returns>
        </member>
        <member name="M:Labo.Common.Patterns.Factory`2.RegisterProvider(`0,System.Func{`1})">
            <summary>
            Registers the provider.
            </summary>
            <param name="key">The key.</param>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Labo.Common.Patterns.Factory`2.RegisterProvider(`0,System.Func{`1},System.Boolean)">
            <summary>
            Registers the provider.
            </summary>
            <param name="key">The key.</param>
            <param name="creator">The creator.</param>
            <param name="transient">if set to <c>true</c> [transient].</param>
        </member>
        <member name="M:Labo.Common.Patterns.Factory`2.ThrowNotFoundException(`0)">
            <summary>
            Throws the not found exception.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:Labo.Common.Patterns.Exception.FactoryCreateInstanceException">Key not found exception.</exception>
        </member>
        <member name="T:Labo.Common.Patterns.IFactoryInstanceCreator`1">
            <summary>
            Factory instance creator class.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
        </member>
        <member name="M:Labo.Common.Patterns.IFactoryInstanceCreator`1.CreateInstance">
            <summary>
            Create new instance.
            </summary>
            <returns>new instance.</returns>
        </member>
        <member name="T:Labo.Common.Patterns.IFluentInterface">
            <summary>
            The FluentInterface interface.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.IFluentInterface.GetType">
            <summary>
            The get type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Labo.Common.Patterns.IFluentInterface.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Labo.Common.Patterns.IFluentInterface.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Labo.Common.Patterns.IFluentInterface.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Labo.Common.Patterns.LazyFactoryInstanceCreator`1">
            <summary>
            Lazy factory instance creator class.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
        </member>
        <member name="F:Labo.Common.Patterns.LazyFactoryInstanceCreator`1.m_Lazy">
            <summary>
            The lazy instance creator.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.LazyFactoryInstanceCreator`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.LazyFactoryInstanceCreator`1"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="threadSafe">if set to <c>true</c> [thread safe].</param>
        </member>
        <member name="M:Labo.Common.Patterns.LazyFactoryInstanceCreator`1.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>the instance.</returns>
        </member>
        <member name="T:Labo.Common.Patterns.Singleton`1">
            <summary>
            Generic Singleton Pattern Implementation
            </summary>
            <typeparam name="TInstance">Singleton instance class.</typeparam>
        </member>
        <member name="F:Labo.Common.Patterns.Singleton`1.s_Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="P:Labo.Common.Patterns.Singleton`1.Instance">
            <summary>
            Gets the Singleton instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:Labo.Common.Patterns.TransientFactoryInstanceCreator`1">
            <summary>
            Transient factory instance creator class.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
        </member>
        <member name="F:Labo.Common.Patterns.TransientFactoryInstanceCreator`1.m_Creator">
            <summary>
            The transient instance creator
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.TransientFactoryInstanceCreator`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.TransientFactoryInstanceCreator`1"/> class.
            </summary>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Labo.Common.Patterns.TransientFactoryInstanceCreator`1.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>the instance.</returns>
        </member>
        <member name="T:Labo.Common.Reflection.ConstructorInvoker">
            <summary>
            A delegate to construct an instance of an object.
            </summary>
            <param name="parameters">The constructor parameters.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="T:Labo.Common.Reflection.MethodInvoker">
            <summary>
            A delegate to call an objects method.
            </summary>
            <param name="obj">The object instance that is going to used for method invocation.</param>
            <param name="parameters">The method parameters.</param>
            <returns>Method return value.</returns>
        </member>
        <member name="T:Labo.Common.Reflection.MemberGetter">
            <summary>
            A delegate to get value of a field or property.
            </summary>
            <param name="obj">
            The object instance to get field or property value.
            </param>
            <returns>The field or property value.</returns>
        </member>
        <member name="T:Labo.Common.Reflection.MemberSetter">
            <summary>
            A delegate to set value of a field or property.
            </summary>
            <param name="obj">
            The object instance to get field or property value.
            </param>
            <param name="value">The value to be set to the field or property.</param>
        </member>
        <member name="T:Labo.Common.Reflection.DynamicMethodCache">
            <summary>
            Dynamic method cache class.
            </summary>
        </member>
        <member name="F:Labo.Common.Reflection.DynamicMethodCache.m_Entries">
            <summary>
            The the delegate entries dictionary.
            </summary>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Reflection.DynamicMethodCache"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodCache.GetOrAddDelegate``1(System.Reflection.MemberInfo,System.Func{``0},Labo.Common.Reflection.DynamicMethodCacheStrategy)">
            <summary>
            Gets or adds the method delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="memberInfo">The member information.</param>
            <param name="creatorFunc">The creator function.</param>
            <param name="cacheStrategy">The cache strategy.</param>
            <returns>The method delegate.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodCache.CreateDelegate``1(System.Func{``0},Labo.Common.Reflection.DynamicMethodCacheStrategy)">
            <summary>
            Creates the delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="creatorFunc">The creator function.</param>
            <param name="cacheStrategy">The cache strategy.</param>
            <returns>The delegate value</returns>
        </member>
        <member name="T:Labo.Common.Reflection.DynamicMethodCacheStrategy">
            <summary>
            Dynamic method cache strategy enumeration.
            </summary>
        </member>
        <member name="F:Labo.Common.Reflection.DynamicMethodCacheStrategy.Temporary">
            <summary>
            That cached items may be collected by the garbage collector.
            </summary>
        </member>
        <member name="F:Labo.Common.Reflection.DynamicMethodCacheStrategy.Permanent">
            <summary>
            The cached items may not be garbage collected. The developer must manually ensure that items are 
            removed from the cache when they are no longer needed.
            </summary>
        </member>
        <member name="T:Labo.Common.Reflection.DynamicMethodHelper">
            <summary>
            Dynamic method helper class.
            </summary>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.EmitPropertySetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Emits the property setter.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>Member setter delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            propertyInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.EmitPropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Emits the property getter.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>Member getter delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            propertyInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.EmitMethodInvoker(System.Type,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Emits the method invoker.
            </summary>
            <param name="type">The type.</param>
            <param name="methodInfo">The method information.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>Method invoker delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            methodInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.EmitConstructorInvoker(System.Type,System.Reflection.ConstructorInfo,System.Type[])">
            <summary>
            Emits the constructor invoker.
            </summary>
            <param name="type">The type.</param>
            <param name="constructorInfo">The constructor info.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>constructor invoker.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.CreateDynamicMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[],System.Type)">
            <summary>
            Creates the dynamic method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="methodAttributes">The method attributes.</param>
            <param name="returnType">Type of the return.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>The dynamic method.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.CreateDynamicMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[],System.Reflection.Module)">
            <summary>
            Creates the dynamic method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="methodAttributes">The method attributes.</param>
            <param name="returnType">Type of the return.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="ownerModule">The owner module.</param>
            <returns>The dynamic method.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.DynamicMethodHelper.PushParametersToStack(System.Reflection.Emit.ILGenerator,System.Type[],System.Int32)">
            <summary>
            Pushes the parameters automatic stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="arrayParameterIndex">Index of the array parameter.</param>
        </member>
        <member name="T:Labo.Common.Reflection.EmitHelper">
            <summary>
            Emit helper class.
            </summary>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.LdNull(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes a null reference (type O) onto the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
             Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.
            </summary>
            <param name="generator">The generator.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.StlocS(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
             Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index (short form).
            </summary>
            <param name="generator">The generator.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stloc0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stloc1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stloc2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stloc3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Stfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <param name="generator">The generator.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Pushes the value of a static field onto the evaluation stack..
            </summary>
            <param name="generator">The generator.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldsflda(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Pushes the address of a static field onto the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor.
            </summary>
            <param name="generator">The generator.</param>
            <param name="methodInfo">The method information.</param>
            <exception cref="T:System.ArgumentNullException">
            generator
            or
            methodInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.CallVirt(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
             Calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="methodInfo">The method information.</param>
            <exception cref="T:System.ArgumentNullException">
            generator
            or
            methodInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Newobj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="constructorInfo">The constructor info.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.BoxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Boxes the type of if it is value type.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.UnBoxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            UnBoxes the type of if it is value type.
            </summary>
            <param name="generator">The generator.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentNullException">
            generator
            or
            type
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ret(System.Reflection.Emit.ILGenerator)">
            <summary>
            Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
            <param name="generator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Initobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.CastIfNotObject(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Casts type if not equals to object.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Castclass(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.UnboxAny(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.LdcI4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="num">The num.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.LdelemRef(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type O (object reference).
            </summary>
            <param name="generator">The il generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Loads the argument at index onto the evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldarg0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 0 onto the evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldarg1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 1 onto the evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldarg2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 2 onto the evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldarg3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 3 onto the evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.LdargS(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <param name="generator">The il generator.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.LdlocaS(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="generator">The generator.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldloc0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Labo.Common.Reflection.EmitHelper.Ldloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="generator">The generator.</param>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="T:Labo.Common.Reflection.ReflectionHelper">
            <summary>
            The reflection helper class.
            </summary>
        </member>
        <member name="F:Labo.Common.Reflection.ReflectionHelper.DEFAULT_PROPERTY_INFO_BINDING_FLAGS">
            <summary>
            The default property info binding flags.
            </summary>
        </member>
        <member name="F:Labo.Common.Reflection.ReflectionHelper.DEFAULT_METHOD_INFO_BINDING_FLAGS">
            <summary>
            The default method info binding flags.
            </summary>
        </member>
        <member name="F:Labo.Common.Reflection.ReflectionHelper.s_DynamicMethodCache">
            <summary>
            The dynamic method cache
            </summary>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Labo.Common.Reflection.ReflectionHelper"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Calls the method.
            </summary>
            <param name="object">The object.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.CallMethod(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Calls the method.
            </summary>
            <param name="object">The object.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="parameters">The parameters.</param>
            <returns>The method return value.</returns>
            <exception cref="T:System.ArgumentNullException">
            object
            or
            methodName
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.CallMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Calls the method.
            </summary>
            <param name="object">The object.</param>
            <param name="methodInfo">The method information.</param>
            <param name="parameters">The parameters.</param>
            <returns>Method return value.</returns>
            <exception cref="T:System.ArgumentNullException">
            object
            or
            methodInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.SetPropertyValue(System.Object,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the property value.
            </summary>
            <param name="object">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="bindingFlags">The binding flags.</param>
            <exception cref="T:System.ArgumentNullException">
            object
            or
            propertyName
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="object">The object.</param>
            <param name="propertyInfo">The property information.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the property value.
            </summary>
            <param name="object">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns>The property value</returns>
            <exception cref="T:System.ArgumentNullException">
            object
            or
            propertyName
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value.
            </summary>
            <param name="object">The object.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>The property value</returns>
            <exception cref="T:System.ArgumentNullException">
            object
            or
            propertyInfo
            </exception>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.GetPropertyInfo(System.String,System.Reflection.BindingFlags,System.Type)">
            <summary>
            Gets the property information.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="type">The type.</param>
            <returns>The property info.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.GetPropertyAccessItem(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property access item.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>The property access item.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.CreatePropertyAccessItem(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates the property access item.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>The property access item.</returns>
        </member>
        <member name="M:Labo.Common.Reflection.ReflectionHelper.GetParameterTypes(System.Collections.Generic.IList{System.Object})">
            <summary>
            Gets the parameter types.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The parameter types.</returns>
        </member>
        <member name="T:Labo.Common.Reflection.ReflectionHelper.PropertyAccessItem">
            <summary>
            The property access item class.
            </summary>
        </member>
        <member name="P:Labo.Common.Reflection.ReflectionHelper.PropertyAccessItem.Getter">
            <summary>
            Gets or sets the getter delegate.
            </summary>
            <value>
            The getter delegate.
            </value>
        </member>
        <member name="P:Labo.Common.Reflection.ReflectionHelper.PropertyAccessItem.Setter">
            <summary>
            Gets or sets the setter delegate.
            </summary>
            <value>
            The setter delegate.
            </value>
        </member>
        <member name="P:Labo.Common.Reflection.ReflectionHelper.PropertyAccessItem.CanRead">
            <summary>
            Gets or sets a value indicating whether property [can read].
            </summary>
            <value>
              <c>true</c> if property [can read]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Labo.Common.Reflection.ReflectionHelper.PropertyAccessItem.CanWrite">
            <summary>
            Gets or sets a value indicating whether property [can write].
            </summary>
            <value>
              <c>true</c> if property [can write]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Labo.Common.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.AssemblyUtils_GetEmbededResourceString_embedded_resource_not_found">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; embedded resource couldn&apos;t be found..
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.ConvertUtils_GetConversionException_An_Error_Occurred_While_Changing_Value">
            <summary>
              Looks up a localized string similar to An Error Occurred While Changing Value.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.EnumUtils_GetNamesAndValues_An_Error_Occurred_While_Getting_Names_and_Values_of_Enum_Type">
            <summary>
              Looks up a localized string similar to An Error Occurred While Getting Names and Values of Enum Type.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.EnumUtils_GetNamesAndValues_Underlying_Type_Must_Be_Enum">
            <summary>
              Looks up a localized string similar to Underlying Type Must Be Enum.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.EnumUtils_Parse_An_Error_Occurred_While_Parsing_Enum_Value">
            <summary>
              Looks up a localized string similar to An Error Occurred While Parsing Enum Value.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.ReflectionHelper_CreateInstance_An_Error_Occurred_While_Creating_Instance">
            <summary>
              Looks up a localized string similar to An Error Occurred While Creating Instance.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.ReflectionHelper_GetPropertyValue_An_Error_Occurred_While_Getting_Property_Value">
            <summary>
              Looks up a localized string similar to An Error Occurred While Getting Property Value.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.ReflectionHelper_SetPropertyValue_An_Error_Occurred_While_Setting_Property_Value">
            <summary>
              Looks up a localized string similar to An Error Occurred While Setting Property Value.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.XmlUtils_AppendAttribute_element_Attributes_is_null">
            <summary>
              Looks up a localized string similar to element.Attributes is null.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.XmlUtils_AppendAttribute_element_OwnerDocument_is_null">
            <summary>
              Looks up a localized string similar to element.OwnerDocument is null.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.XmlUtils_AppendNodeToParent_parentNode_OwnerDocument_is_null">
            <summary>
              Looks up a localized string similar to parentNode.OwnerDocument is null.
            </summary>
        </member>
        <member name="P:Labo.Common.Resources.Strings.XmlUtils_GetNodeProperty_Error">
            <summary>
              Looks up a localized string similar to GetNodeProperty Error.
            </summary>
        </member>
        <member name="T:Labo.Common.Patterns.DefaultDateTimeProvider">
            <summary>
            Default date time provider.
            </summary>
        </member>
        <member name="T:Labo.Common.Patterns.IDateTimeProvider">
            <summary>
            Date time provider interface.
            </summary>
        </member>
        <member name="P:Labo.Common.Patterns.IDateTimeProvider.UtcNow">
            <summary>
            Gets the UTC now.
            </summary>
            <value>
            The UTC now.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.IDateTimeProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>
            The now.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.IDateTimeProvider.Today">
            <summary>
            Gets the today.
            </summary>
            <value>
            The today.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.DefaultDateTimeProvider.UtcNow">
            <summary>
            Gets the UTC now.
            </summary>
            <value>
            The UTC now.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.DefaultDateTimeProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>
            The now.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.DefaultDateTimeProvider.Today">
            <summary>
            Gets the today.
            </summary>
            <value>
            The today.
            </value>
        </member>
        <member name="T:Labo.Common.Utils.CultureUtils">
            <summary>
            Culture utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.CultureUtils.GetCurrentCultureIfNull(System.Globalization.CultureInfo)">
            <summary>
            Gets the current culture if the specified culture is null.
            </summary>
            <param name="culture">The culture.</param>
            <returns>CultureInfo</returns>
        </member>
        <member name="T:Labo.Common.Utils.DayName">
            <summary>
            Day name struct.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.DayName.op_Equality(Labo.Common.Utils.DayName,Labo.Common.Utils.DayName)">
            <summary>
             Determines whether two specified instances of <see cref="T:Labo.Common.Utils.DayName"/> are equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns> true if <paramref name="left"/> and <paramref name="right"/> represent the same DayName; otherwise, false.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DayName.op_Inequality(Labo.Common.Utils.DayName,Labo.Common.Utils.DayName)">
            <summary>
            Determines whether two specified instances of <see cref="T:Labo.Common.Utils.DayName"/> are not equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns> true if <paramref name="left"/> and <paramref name="right"/> do not represent the same DayName; otherwise, false.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DayName.Equals(Labo.Common.Utils.DayName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Labo.Common.Utils.DayName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Labo.Common.Utils.DayName.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Labo.Common.Utils.DayName.Number">
            <summary>
            Gets or sets the day number.
            </summary>
            <value>
            The day number.
            </value>
        </member>
        <member name="P:Labo.Common.Utils.DayName.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Labo.Common.Utils.Exceptions.ConversionException">
            <summary>
            Conversion exception class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.ConversionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.ConversionException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.ConversionException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.ConversionException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.ConversionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.ConversionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.ConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.ConversionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.ConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.ConversionException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.ConversionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Utils.ConvertUtils">
            <summary>
            Convert utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Labo.Common.Utils.ConvertUtils"/> class. 
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.RegisterTypeConverter``2">
            <summary>
            Registers the type converter.
            </summary>
            <typeparam name="TValue">The type of the Value.</typeparam>
            <typeparam name="TConverter">The type of the Converter.</typeparam>
            CA2135 violation - the LinkDemand should be removed, and the method marked [SecurityCritical] instead
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.ChangeType``1(System.Object)">
            <summary>
            Changes the type of the value.
            </summary>
            <typeparam name="TValue">Type to convert value.</typeparam>
            <param name="value">The value.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.ChangeType``1(System.Object,``0)">
            <summary>
            Changes the type of the value.
            </summary>
            <typeparam name="TValue">Type to convert value.</typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.ChangeType``1(System.Object,``0,System.Globalization.CultureInfo)">
            <summary>
            Changes the type of the value.
            </summary>
            <typeparam name="TValue">Type to convert value.</typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="culture">The culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.ChangeType``1(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Changes the type.
            </summary>
            <typeparam name="TValue">Type to convert value.</typeparam>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.ChangeType(System.Object,System.Type)">
            <summary>
            Changes the type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Changes the type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="culture">The culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.TryConvertToBoolean(System.Object,System.Type,System.Boolean,System.Nullable{System.Boolean}@)">
            <summary>
            Tries the convert to boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="valueType">Type of the value.</param>
            <param name="convertToNullableBoolean">if set to <c>true</c> [convert to nullable boolean].</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if value can be converted to boolean.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.TryConvertByIConvertible(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Tries the convert by IConvertible interface.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="culture">The culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ConvertUtils.GetConversionException(System.Object,System.Type,System.Globalization.CultureInfo,System.Exception)">
            <summary>
            Gets the conversion exception.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="culture">The culture.</param>
            <param name="exception">The exception.</param>
            <returns>ConversionException</returns>
        </member>
        <member name="T:Labo.Common.Utils.Converters.FileInfoConverter">
            <summary>
            File info type converter class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Converters.FileInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.Converters.FileInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Labo.Common.Utils.Converters.RegexConverter">
            <summary>
            Regex type converter class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Converters.RegexConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.Converters.RegexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Labo.Common.Utils.Converters.StringArrayConverter">
            <summary>
            String array converter class.
            </summary>
        </member>
        <member name="F:Labo.Common.Utils.Converters.StringArrayConverter.DEFAULT_LIST_SEPARATOR">
            <summary>
            The default list separator.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Converters.StringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.Converters.StringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Labo.Common.Utils.Converters.UriConverter">
            <summary>
            Uri type converter class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Converters.UriConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.Converters.UriConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Labo.Common.Culture.EncodingHelper">
            <summary>
            Encoding helper class.
            </summary>
        </member>
        <member name="P:Labo.Common.Culture.EncodingHelper.CurrentCultureEncoding">
            <summary>
            Gets the current culture encoding.
            </summary>
            <value>
            The current culture encoding.
            </value>
        </member>
        <member name="T:Labo.Common.Dynamic.DynamicDictionary">
            <summary>
            Dynamic dictionary class.
            </summary>
        </member>
        <member name="F:Labo.Common.Dynamic.DynamicDictionary.m_Dictionary">
            <summary>
            The inner dictionary
            </summary>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Dynamic.DynamicDictionary"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Dynamic.DynamicDictionary"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names. 
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Labo.Common.Dynamic.DynamicDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key, or null if the key does not exist.
            </returns>
            <param name="key">The key of the element to get or set. </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary"/> object is read-only.-or- The property is set, <paramref name="key"/> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Labo.Common.Dynamic.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="T:Labo.Common.Exceptions.BaseUserLevelException">
            <summary>
            Base user level exception.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.BaseUserLevelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.BaseUserLevelException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.BaseUserLevelException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.BaseUserLevelException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.BaseUserLevelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.BaseUserLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.BaseUserLevelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.BaseUserLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.BaseUserLevelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.BaseUserLevelException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.BaseUserLevelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception> 
            <PermissionSet>
             <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Exceptions.CriticalUserLevelException">
            <summary>
            Critical user level exception.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.CriticalUserLevelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CriticalUserLevelException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.CriticalUserLevelException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CriticalUserLevelException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CriticalUserLevelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CriticalUserLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CriticalUserLevelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CriticalUserLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CriticalUserLevelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.CriticalUserLevelException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.CriticalUserLevelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Exceptions.UserLevelException">
            <summary>
            User level exception.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.UserLevelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.UserLevelException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Exceptions.UserLevelException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.UserLevelException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.UserLevelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.UserLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.UserLevelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.UserLevelException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.UserLevelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Exceptions.UserLevelException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Exceptions.UserLevelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception> 
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:System.CollectionExtensions">
            <summary>
            Collection extensions.
            </summary>
        </member>
        <member name="M:System.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action for each element of the System.Collections.Generic.IEnumerable.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <param name="collection">The target collection.</param>
            <param name="action">The action to be performed foreach element of the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            collection
            or
            action
            </exception>
        </member>
        <member name="M:System.CollectionExtensions.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Reverses the specified comparer.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="comparer">The comparer.</param>
            <returns>Reversed comparer.</returns>
            <exception cref="T:System.ArgumentNullException">comparer</exception>
        </member>
        <member name="T:System.SystemExtensions">
            <summary>
            System extension methods.
            </summary>
        </member>
        <member name="M:System.SystemExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether [is null or empty] [the specified string].
            </summary>
            <param name="string">The string.</param>
            <returns>
              <c>true</c> if [is null or empty] [the specified string]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.SystemExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether [is null or white space] [the specified string].
            </summary>
            <param name="string">The string.</param>
            <returns>
              <c>true</c> if [is null or white space] [the specified string]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.SystemExtensions.EqualsOrdinalIgnoreCase(System.String,System.String)">
            <summary>
             Determines whether two specified <see cref="T:System.String"/> objects have the same value using ordinal ignore case comparison
            </summary>
            <param name="a">The first string value.</param>
            <param name="b">The second string value.</param>
            <returns>true if the value of the <paramref name="a"/> parameter is equal to the value of the <paramref name="b"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:System.SystemExtensions.ToStringInvariant(System.Object)">
            <summary>
            Converts specified object to the string using invariant culture.
            </summary>
            <param name="object">The object.</param>
            <returns>string value of the specified object.</returns>
        </member>
        <member name="M:System.SystemExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats string value.
            </summary>
            <param name="string">The string.</param>
            <param name="args">The args.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:System.SystemExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Formats string value.
            </summary>
            <param name="string">The string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="args">The args.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="T:Labo.Common.Utils.AssemblyUtils">
            <summary>
            Assembly Utils class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetAssemblyTime(System.Reflection.Assembly)">
            <summary>
            Gets the assembly time.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>Assembly last write time.</returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetEmbeddedResourceString(System.String)">
            <summary>
            Gets the embedded resource string.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <returns>Embedded resource as string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetEmbeddedResourceString(System.String,System.Text.Encoding)">
            <summary>
            Gets the embedded resource string.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="encoding">The encoding.</param>
            <returns>Embedded resource as string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetEmbeddedResourceString(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource string.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">Name of the resource.</param>
            <returns>Embedded resource as string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetEmbeddedResourceString(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            Gets the embedded resource string.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="encoding">The encoding.</param>
            <returns>Embedded resource as string.</returns>
            <exception cref="T:System.ArgumentNullException">
            assembly
            or
            resourceName
            or
            encoding
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetEmbeddedResourceBinary(System.String)">
            <summary>
            Gets the embedded resource binary.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <returns>Embedded resource as byte array.</returns>
        </member>
        <member name="M:Labo.Common.Utils.AssemblyUtils.GetEmbeddedResourceBinary(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource binary.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">Name of the resource.</param>
            <returns>Embedded resource as byte array.</returns>
            <exception cref="T:System.ArgumentNullException">
            assembly
            or
            resourceName
            </exception>
        </member>
        <member name="T:Labo.Common.Utils.CodeUtils">
            <summary>
            Code Utils class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.CodeUtils.TryCatch(System.Action,System.Action{System.Exception})">
            <summary>
            Wraps action with try-catch.
            </summary>
            <param name="action">The action.</param>
            <param name="exceptionHandler">The exception handler.</param>
            <returns>true if action is called</returns>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="T:Labo.Common.Utils.CollectionUtils">
            <summary>
            Collection Utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.ConvertTo``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Converts a list to another list.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="list">The list.</param>
            <param name="converter">The converter.</param>
            <returns>Converted list.</returns>
            <exception cref="T:System.ArgumentNullException">
            list
            or
            converter
            </exception>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds the range to the specified list.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException">
            list
            or
            values
            </exception>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.Project``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Projects the specified list.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="list">The list.</param>
            <param name="projectionFunction">The project function.</param>
            <returns>Projected object.</returns>
            <exception cref="T:System.ArgumentNullException">
            list
            or
            projectionFunction
            </exception>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether [is null or empty] [the specified collection].
            </summary>
            <typeparam name="TItem">Collection item type.</typeparam>
            <param name="collection">The collection.</param>
            <returns>
              <c>true</c> if [is null or empty] [the specified collection]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.IsNullOrEmpty``1(``0[])">
            <summary>
            Determines whether [is null or empty] [the specified array].
            </summary>
            <typeparam name="TItem">Array item type.</typeparam>
            <param name="array">The array.</param>
            <returns>
              <c>true</c> if [is null or empty] [the specified array]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.ToDataTable``1(System.Collections.Generic.IList{``0},System.Globalization.CultureInfo)">
            <summary>
            To the data table.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list.</param>
            <param name="culture">The culture.</param>
            <returns>Converted data table.</returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.ToDataTable(System.Collections.Generic.ICollection{Labo.Common.Dynamic.DynamicDictionary},System.Globalization.CultureInfo)">
            <summary>
            To the data table.
            </summary>
            <param name="list">The list.</param>
            <param name="culture">The culture.</param>
            <returns>Converted data table.</returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
        </member>
        <member name="M:Labo.Common.Utils.CollectionUtils.AddRow(System.Data.DataTable,System.Collections.IDictionary,System.Globalization.CultureInfo)">
            <summary>
            Adds the row.
            </summary>
            <param name="table">The table.</param>
            <param name="item">The item.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="T:Labo.Common.Utils.CryptoUtils">
            <summary>
            Cryptography utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.CryptoUtils.EncryptMd5(System.String)">
            <summary>
            Encrypts the string to MD5 hash.
            </summary>
            <param name="value">The value.</param>
            <returns>MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Labo.Common.Utils.CryptoUtils.EncryptMd5AsHexString(System.String)">
            <summary>
            Encrypts the MD5 as hex string.
            </summary>
            <param name="input">The input.</param>
            <returns>MD5 hash as Hex format.</returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="T:Labo.Common.Utils.DateTimeUtils">
            <summary>
            Date time utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetDayNames(System.Globalization.CultureInfo)">
            <summary>
            Gets the day names.
            </summary>
            <param name="culture">The culture.</param>
            <returns>Day names list.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetMonthNames(System.Globalization.CultureInfo)">
            <summary>
            Gets the month names of the specified culture.
            </summary>
            <param name="culture">The culture.</param>
            <returns>Month names list.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of month.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>First day of the month of the specified date.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>Last day of the month of the specified date.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetDaysOfMonth(System.DateTime)">
            <summary>
            Gets the days of month.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>Total day count of the month.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Gets the first day of week.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>First day of week.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the first day of week.
            </summary>
            <param name="currentDate">The current date.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns>First day of week.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetFirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first day of week.
            </summary>
            <param name="currentDate">The current date.</param>
            <param name="firstDay">The first day.</param>
            <returns>First day of week.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetLastDayOfWeek(System.DateTime)">
            <summary>
            Gets the last day of week.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>Last day of week.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the last day of week.
            </summary>
            <param name="currentDate">The current date.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns>Last day of week.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetLastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last day of week.
            </summary>
            <param name="current">The current.</param>
            <param name="firstDay">The first day.</param>
            <returns>Last day of week.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetMidnight(System.DateTime)">
            <summary>
            Gets the midnight.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>Midnight date.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.GetNoon(System.DateTime)">
            <summary>
            Gets the noon.
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>Noon date.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.CalculateAge(System.DateTime,Labo.Common.Patterns.IDateTimeProvider)">
            <summary>
            Calculates the age.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dateTimeProvider">The date time provider.</param>
            <returns>Age.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.CalculateAge(System.DateTime)">
            <summary>
            Calculates the age.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Age.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DateTimeUtils.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            Calculates the age.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="currentDate">The current date.</param>
            <returns>Age.</returns>
        </member>
        <member name="T:Labo.Common.Utils.DictionaryUtils">
            <summary>
            Dictionary utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.DictionaryUtils.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DictionaryUtils.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.DictionaryUtils.ToNameValueCollection(System.Collections.IDictionary,System.Globalization.CultureInfo)">
            <summary>
            To the name value collection.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="culture">The culture for string conversion.</param>
            <returns>NameValueCollection.</returns>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="T:Labo.Common.Utils.EnumUtils">
            <summary>
            Enumeration utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.GetNamesAndValues``2">
            <summary>
            Gets the names and values.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TUnderlyingType">The type of the underlying type.</typeparam>
            <returns>Names and values dictionary.</returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets the names and values.
            </summary>
            <typeparam name="TEnumType">Enum type.</typeparam>
            <returns>Names and values dictionary.</returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets the names and values.
            </summary>
            <typeparam name="TUnderlyingType">The type of the underlying type.</typeparam>
            <param name="enumType">Type of the enum.</param>
            <exception cref="T:System.ArgumentException">Underlying Type Must Be Enum</exception>
            <exception cref="T:System.ArgumentNullException">enumType cannot be null</exception>
            <returns>Names and values dictionary.</returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.Parse``1(System.String)">
            <summary>
            Parses the specified enum member name.
            </summary>
            <typeparam name="TValue">Enum type.</typeparam>
            <param name="enumMemberName">Name of the enum member.</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified enum member name.
            </summary>
            <typeparam name="TValue">Enum type.</typeparam>
            <param name="enumMemberName">Name of the enum member.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="enumMemberName">Name of the enum member.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <exception cref="T:System.ArgumentNullException">type and enumMemberName cannot be null</exception>
            <exception cref="T:System.ArgumentException">type argument must be enum type</exception>
            <returns>Enum object.</returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.TryParse``1(System.String,``0@)">
            <summary>
            Tries to parse the specified type.
            </summary>
            <typeparam name="TValue">Enum value.</typeparam>
            <param name="enumMemberName">Name of the enum member.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if parses to enum value, otherwise <c>false</c></returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Tries to parse the specified type.
            </summary>
            <typeparam name="TValue">Enum type.</typeparam>
            <param name="enumMemberName">Name of the enum member.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if parses to enum value, otherwise <c>false</c></returns>
        </member>
        <member name="M:Labo.Common.Utils.EnumUtils.TryParse(System.Type,System.String,System.Boolean,System.Object@)">
            <summary>
             Tries to parse the specified type.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="enumMemberName">Name of the enum member.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if parses to enum value, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            enumType
            or
            enumMemberName
            </exception>
            <exception cref="T:System.ArgumentException">enumType</exception>
        </member>
        <member name="T:Labo.Common.Utils.Exceptions.AssemblyUtilsException">
            <summary>
            Assembly utils exception class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.AssemblyUtilsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.AssemblyUtilsException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.AssemblyUtilsException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.AssemblyUtilsException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.AssemblyUtilsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.AssemblyUtilsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.AssemblyUtilsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.AssemblyUtilsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.AssemblyUtilsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.AssemblyUtilsException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.AssemblyUtilsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception> 
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Utils.Exceptions.StringUtilsException">
            <summary>
            String utils exception class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.StringUtilsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.StringUtilsException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.StringUtilsException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.StringUtilsException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.StringUtilsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.StringUtilsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.StringUtilsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.StringUtilsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.StringUtilsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.StringUtilsException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.StringUtilsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Utils.Exceptions.XmlUtilsException">
            <summary>
            Xml utils exception class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.XmlUtilsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.XmlUtilsException"/> class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.XmlUtilsException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.XmlUtilsException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.XmlUtilsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.XmlUtilsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.XmlUtilsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.XmlUtilsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.XmlUtilsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.Exceptions.XmlUtilsException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Labo.Common.Utils.Exceptions.XmlUtilsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Labo.Common.Utils.ExceptionUtils">
            <summary>
            Exception utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.ExceptionUtils.Find``1(System.Exception)">
            <summary>
            Finds in the specified exception.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="exception">The exception.</param>
            <returns>Exception.</returns>
        </member>
        <member name="T:Labo.Common.Patterns.FuncDateTimeProvider">
            <summary>
            Date time provider function class.
            </summary>
        </member>
        <member name="F:Labo.Common.Patterns.FuncDateTimeProvider.m_FuncDateTime">
            <summary>
            The date time function.
            </summary>
        </member>
        <member name="M:Labo.Common.Patterns.FuncDateTimeProvider.#ctor(System.Func{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Patterns.FuncDateTimeProvider"/> class.
            </summary>
            <param name="funcDateTime">The date time function.</param>
            <exception cref="T:System.ArgumentNullException">funcDateTime</exception>
        </member>
        <member name="P:Labo.Common.Patterns.FuncDateTimeProvider.UtcNow">
            <summary>
            Gets the UTC now.
            </summary>
            <value>
            The UTC now.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.FuncDateTimeProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>
            The now.
            </value>
        </member>
        <member name="P:Labo.Common.Patterns.FuncDateTimeProvider.Today">
            <summary>
            Gets the today.
            </summary>
            <value>
            The today.
            </value>
        </member>
        <member name="T:Labo.Common.Utils.IOUtils">
            <summary>
            IO utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads all text of the stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The text encoding.</param>
            <returns>text.</returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.MimeType(System.String)">
            <summary>
            MIMEs the type.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Mime type.</returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.RenameDirectory(System.String,System.String)">
            <summary>
            Renames the directory.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.RenameFile(System.String,System.String)">
            <summary>
            Renames the file.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.DeleteDirectory(System.String,System.Boolean,System.Int32)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <param name="tryCount">The try count.</param>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies the directory.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="override">if set to <c>true</c> [override].</param>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.EnumerateDirectoriesExcludeHidden(System.String)">
            <summary>
            Enumerates the directories exclude hidden.
            </summary>
            <param name="path">The path.</param>
            <returns>Directory list.</returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.EnumerateFilesExcludeHidden(System.String)">
            <summary>
            Enumerates the files exclude hidden.
            </summary>
            <param name="path">The path.</param>
            <returns>File list.</returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.EnumerateFilesExcludeHidden(System.String,System.String)">
            <summary>
            Enumerates the files exclude hidden.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>File list.</returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.IsImageExtension(System.String)">
            <summary>
            Determines whether [is image extension] [the specified extension].
            </summary>
            <param name="extension">The extension.</param>
            <returns>
              <c>true</c> if [is image extension] [the specified extension]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.ConvertToImageFormat(System.String)">
            <summary>
            Converts to image format.
            </summary>
            <param name="extension">The extension.</param>
            <returns>Image format.</returns>
            <exception cref="T:System.ArgumentNullException">extension</exception>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.ValidateImage(System.String)">
            <summary>
            Validates the image.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if image else <c>false</c></returns>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures the directory exists.
            </summary>
            <param name="folder">The folder.</param>
            <exception cref="T:System.ArgumentNullException">folder</exception>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.CreateHiddenFile(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.MakeReadonly(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Labo.Common.Utils.IOUtils.Folders">
            <summary>
            Folders helper class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.IOUtils.Folders.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labo.Common.Utils.IOUtils.Folders"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            target
            </exception>
        </member>
        <member name="P:Labo.Common.Utils.IOUtils.Folders.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Labo.Common.Utils.IOUtils.Folders.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:Labo.Common.Utils.IOUtils.Folders.SourceSubFolders">
            <summary>
            Gets the source sub folders.
            </summary>
            <value>
            The source sub folders.
            </value>
        </member>
        <member name="T:Labo.Common.Utils.LinqUtils">
            <summary>
            Linq Utils class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.LinqUtils.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the member.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <typeparam name="TProp">The type of the prop.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Member name of the expression.</returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Labo.Common.Utils.LinqUtils.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the member info.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="expression">The expression.</param>
            <returns>MemberInfo of the expression.</returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
            <exception cref="T:System.InvalidOperationException">Expression body must be MemberExpression, MethodCallExpression or UnaryExpression</exception>
        </member>
        <member name="T:Labo.Common.Utils.MiscUtils">
            <summary>
            Miscellaneous Utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.MiscUtils.GenerateRandomString(System.Int32,System.String)">
            <summary>
            Generates the random string.
            </summary>
            <param name="maxSize">Size of the max.</param>
            <param name="characterSet">The character set.</param>
            <returns>Generated random string.</returns>
            <exception cref="T:System.ArgumentNullException">characterSet</exception>
        </member>
        <member name="M:Labo.Common.Utils.MiscUtils.GenerateRandomString(System.Int32,System.Char[])">
            <summary>
            Generates the random string.
            </summary>
            <param name="maxSize">Size of the max.</param>
            <param name="characterSet">The character set.</param>
            <returns>Generated random string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxSize</exception>
            <exception cref="T:System.ArgumentNullException">characterSet</exception>
        </member>
        <member name="M:Labo.Common.Utils.MiscUtils.LongToBase20String(System.Int64)">
            <summary>
            Longs to base20 string.
            </summary>
            <param name="value">The value.</param>
            <returns>Base20 string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.MiscUtils.BaseStringToLong(System.String,System.Char[])">
            <summary>
            Bases the string to long.
            </summary>
            <param name="value">The value.</param>
            <param name="baseChars">The base chars.</param>
            <returns>Base string.</returns>
            <exception cref="T:System.ArgumentNullException">
            value
            or
            baseChars
            </exception>
        </member>
        <member name="M:Labo.Common.Utils.MiscUtils.LongToBaseString(System.Int64,System.Char[])">
            <summary>
            Longs to base string.
            </summary>
            <param name="value">The value.</param>
            <param name="baseChars">The base chars.</param>
            <returns>Base string.</returns>
            <exception cref="T:System.ArgumentNullException">baseChars</exception>
        </member>
        <member name="M:Labo.Common.Utils.MiscUtils.ToInt32(System.String)">
            <summary>
            Converts to integer.
            </summary>
            <param name="value">The value.</param>
            <returns>Integer value.</returns>
        </member>
        <member name="T:Labo.Common.Utils.MonthName">
            <summary>
            Month name struct.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.MonthName.op_Equality(Labo.Common.Utils.MonthName,Labo.Common.Utils.MonthName)">
            <summary>
             Determines whether two specified instances of <see cref="T:Labo.Common.Utils.MonthName"/> are equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns> true if <paramref name="left"/> and <paramref name="right"/> represent the same MonthName; otherwise, false.</returns>
        </member>
        <member name="M:Labo.Common.Utils.MonthName.op_Inequality(Labo.Common.Utils.MonthName,Labo.Common.Utils.MonthName)">
            <summary>
            Determines whether two specified instances of <see cref="T:Labo.Common.Utils.MonthName"/> are not equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns> true if <paramref name="left"/> and <paramref name="right"/> do not represent the same MonthName; otherwise, false.</returns>
        </member>
        <member name="M:Labo.Common.Utils.MonthName.Equals(Labo.Common.Utils.MonthName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Labo.Common.Utils.MonthName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Labo.Common.Utils.MonthName.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Labo.Common.Utils.MonthName.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>
            The number.
            </value>
        </member>
        <member name="P:Labo.Common.Utils.MonthName.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Labo.Common.Utils.ObjectUtils">
            <summary>
            Object utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.ObjectUtils.IsNull``1(``0,System.Func{``0})">
            <summary>
            Determines whether the specified object is null.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="object">The object.</param>
            <param name="defaultValueCreator">The default value creator.</param>
            <returns>object.</returns>
            <exception cref="T:System.ArgumentNullException">defaultValueCreator</exception>
        </member>
        <member name="M:Labo.Common.Utils.ObjectUtils.Cast``1(System.Object)">
            <summary>
            Casts the specified object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="object">The object.</param>
            <returns>casted object.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ObjectUtils.ToStringInvariant(System.Object)">
            <summary>
            To the string invariant.
            </summary>
            <param name="object">The object.</param>
            <returns>string</returns>
        </member>
        <member name="T:Labo.Common.Utils.ReflectionUtils">
            <summary>
            Reflection Utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttribute``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <typeparam name="TType">The type of the class.</typeparam>
            <typeparam name="TProperty">The type of the class property.</typeparam>
            <param name="expression">The expression.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>Custom attribute.</returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="TAttribute">Custom attribute type.</typeparam>
            <param name="memberInfo">The member info.</param>
            <returns>Custom attribute.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="TAttribute">Custom attribute type.</typeparam>
            <param name="parameterInfo">The parameter info.</param>
            <returns>Custom attribute.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="TAttribute">Custom attribute type.</typeparam>
            <param name="parameterInfo">The parameter info.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>Custom attribute.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="TAttribute">Custom attribute type.</typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>Custom attribute.</returns>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.HasCustomAttribute``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Boolean)">
            <summary>
            Determines whether [has custom attribute] [the specified expression].
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TType">The type of the type.</typeparam>
            <typeparam name="TProperty">The type of the prop.</typeparam>
            <param name="expression">The expression.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
              <c>true</c> if [has custom attribute] [the specified expression]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.HasCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether [has custom attribute] [the specified member info].
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
              <c>true</c> if [has custom attribute] [the specified member info]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttributes``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TType">The type of the class.</typeparam>
            <typeparam name="TProperty">The type of the class property.</typeparam>
            <param name="expression">The expression.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>Custom attributes.</returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>Custom attributes.</returns>
            <exception cref="T:System.ArgumentNullException">memberInfo</exception>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="parameterInfo">The parameter info.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>Custom attributes.</returns>
            <exception cref="T:System.ArgumentNullException">parameterInfo</exception>
        </member>
        <member name="M:Labo.Common.Utils.ReflectionUtils.HasVisibleDefaultConstructor(System.Type)">
            <summary>
            Determines whether [has visible default constructor] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [has visible default constructor] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Labo.Common.Utils.SerializationUtils">
            <summary>
            Serialization utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.SerializationUtils.XmlSerializeObject(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Method to convert a custom Object to XML string
            </summary>
            <param name="value">Object that is to be serialized to XML</param>
            <param name="culture">Culture.</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <returns>XML string</returns>
        </member>
        <member name="M:Labo.Common.Utils.SerializationUtils.DeserializeXmlObject(System.String,System.Type)">
            <summary>
            Method to reconstruct an Object from XML string
            </summary>
            <param name="value">String that is to be deserialized.</param>
            <param name="objectType">Type of the object that is deserialized.</param>
            <exception cref="T:System.ArgumentNullException">value or objectType</exception>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Labo.Common.Utils.SerializationUtils.DeserializeXmlObject``1(System.String)">
            <summary>
            Method to reconstruct an Object from XML string
            </summary>
            <param name="value">Xml value.</param>
            <typeparam name="TObject">Object type to deserialize.</typeparam>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Labo.Common.Utils.SerializationUtils.BinarySerializeObject(System.Object)">
            <summary>
            The serialize object to binary.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte array.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Labo.Common.Utils.SerializationUtils.BinaryDeserializeObject``1(System.Byte[])">
            <summary>
            Binaries the deserialize object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="data">The data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Labo.Common.Utils.SerializationUtils.BinaryDeserializeObject(System.Byte[])">
            <summary>
            Binaries the deserialize object.
            </summary>
            <param name="data">The data.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="T:Labo.Common.Utils.StringUtils">
            <summary>
            String Utility class.
            </summary>
        </member>
        <member name="F:Labo.Common.Utils.StringUtils.BR_STRING">
            <summary>
            The BR STRING
            </summary>
        </member>
        <member name="F:Labo.Common.Utils.StringUtils.s_NewLineStrings">
            <summary>
            The new line strings
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.EqualsOrdinalIgnoreCase(System.String,System.String)">
            <summary>
             Determines whether two specified <see cref="T:System.String"/> objects have the same value using ordinal ignore case comparison
            </summary>
            <param name="a">The first string value.</param>
            <param name="b">The second string value.</param>
            <returns>true if the value of the <paramref name="a"/> parameter is equal to the value of the <paramref name="b"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.IsNumeric(System.String)">
            <summary>
            Determines whether the specified string is numeric.
            </summary>
            <param name="string">The string.</param>
            <returns>
              <c>true</c> if the specified string is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.ConvertNewLineToBr(System.String)">
            <summary>
            Converts the new line to br.
            </summary>
            <param name="target">The target.</param>
            <returns>converted string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.ReplaceNewLine(System.String,System.String)">
            <summary>
            Replaces the new line.
            </summary>
            <param name="target">The target.</param>
            <param name="newValue">The new value.</param>
            <returns>new string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Count(System.String,System.Char)">
            <summary>
            Counts the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="character">The character.</param>
            <returns>Character count.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.IsAtoZ(System.Char)">
            <summary>
            Determines whether [is A to Z] [the specified @char].
            </summary>
            <param name="char">The @char.</param>
            <returns>
              <c>true</c> if [is A to Z] [the specified @char]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Truncate(System.String,System.Int32,System.String,System.String)">
            <summary>
            Truncates the specified @string.
            </summary>
            <param name="string">The @string.</param>
            <param name="length">The length.</param>
            <param name="postText">The post text.</param>
            <param name="preText">The pre text</param>
            <returns>truncated string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Truncate(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Truncates the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <param name="postText">The post text.</param>
            <param name="preText">The pre text</param>
            <returns>truncated string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Joins to string.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items.</param>
            <param name="func">The func.</param>
            <param name="separator">The separator.</param>
            <returns>new string.</returns>
            <exception cref="T:System.ArgumentNullException">
            items
            or
            func
            </exception>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.String})">
            <summary>
            Joins the specified strings.
            </summary>
            <param name="strings">The strings.</param>
            <param name="separator">The separator.</param>
            <param name="func">The func.</param>
            <returns>joined string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Capitalize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Capitalizes the specified string.
            </summary>
            <param name="string">The string.</param>
            <param name="culture">The culture.</param>
            <returns>capitalized string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether the [value] [contains] in [the specified target].
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>
              <c>true</c> if the [value] [contains] in [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Contains(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Determines whether [contains] [the specified target].
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>
              <c>true</c> if [contains] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Contains(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Determines whether [contains] [the specified target].
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns>
              <c>true</c> if [contains] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Contains(System.String,System.String,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Determines whether [contains] [the specified target].
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="culture">The culture.</param>
            <returns>
              <c>true</c> if [contains] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Left(System.String,System.Int32)">
            <summary>
            Lefts the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="length">The length.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Reverse(System.String)">
            <summary>
            Reverses the specified string.
            </summary>
            <param name="s">The string.</param>
            <returns>Reversed string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Right(System.String,System.Int32)">
            <summary>
            Rights the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="length">The length.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the first character of each word to Uppercase. Example: "the lazy dog" returns "The Lazy Dog"
            </summary>
            <param name="text">The text to convert to sentence case</param>
            <param name="culture">The culture.</param>
            <returns>title cased string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.ToTitleCase(System.String[],System.Globalization.CultureInfo)">
            <summary>
            Converts the first character of each word to Uppercase. Example: "the lazy dog" returns "The Lazy Dog"ç
            </summary>
            <param name="words">The words.</param>
            <param name="culture">The culture.</param>
            <returns>title cased string.</returns>
            <exception cref="T:System.ArgumentNullException">words</exception>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.PadLeft(System.String,System.Char,System.Int32)">
            <summary>
            Pad the left side of a string with characters to make the total length.
            </summary>
            <param name="src">The source string.</param>
            <param name="c">The character.</param>
            <param name="totalLength">The total length.</param>
            <returns>string.</returns>
            <exception cref="T:System.ArgumentNullException">src</exception>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.PadRight(System.String,System.Char,System.Int32)">
            <summary>
            Pad the right side of a string with characters to make the total length.
            </summary>
            <param name="src">The source string.</param>
            <param name="c">The character.</param>
            <param name="totalLength">The total length.</param>
            <returns>string.</returns>
            <exception cref="T:System.ArgumentNullException">src</exception>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.Enquote(System.String)">
            <summary>
            Enquotes the specified string.
            </summary>
            <param name="s">The string.</param>
            <returns>string</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.EncodeJsString(System.String)">
            <summary>
            Encodes a string to be represented as a string literal. The format
            is essentially a JSON string.
            The string returned includes outer quotes 
            Example Output: "Hello \"Rick\"!\r\nRock on"
            http://www.west-wind.com/weblog/posts/2007/Jul/14/Embedding-JavaScript-Strings-from-an-ASPNET-Page
            </summary>
            <param name="s">string.</param>
            <returns>Javascript encoded string.</returns>
        </member>
        <member name="F:Labo.Common.Utils.StringUtils.s_StripHtmlRegex">
            <summary>
            The strip HTML regex
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.StripHtmlTags(System.String)">
            <summary>
            Remove HTML tags from string using char array.
            </summary>
            <param name="source">The source.</param>
            <returns>striped html.</returns>
        </member>
        <member name="F:Labo.Common.Utils.StringUtils.s_TurkishCharacterMap">
            <summary>
            The turkish character map
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.ReplaceTurkishCharacters(System.String)">
            <summary>
            Replaces the turkish characters.
            </summary>
            <param name="text">The text.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Labo.Common.Utils.StringUtils.GetJoinedStringResult(System.Text.StringBuilder,System.String)">
            <summary>
            Gets the joined string result.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="separator">The separator.</param>
            <returns>string.</returns>
        </member>
        <member name="T:Labo.Common.Utils.TypeUtils">
            <summary>
            Type utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsNumberType(System.Object)">
            <summary>
            Determines whether [is number type] (long, int, short or byte).
            </summary>
            <param name="object">The @object.</param>
            <returns>
              <c>true</c> if [is number type] [the specified @object]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsNumericType(System.Object)">
            <summary>
            Determines whether [is numeric type] (long, int, short, byte, float, double or decimal).
            </summary>
            <param name="object">The @object.</param>
            <returns>
              <c>true</c> if [is numeric type] [the specified @object]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsNumberType(System.Type,System.Boolean)">
            <summary>
            Determines whether [is number type] (long, int, short or byte).
            </summary>
            <param name="type">The type.</param>
            <param name="includeNullables">Include nullable types.</param>
            <returns>
              <c>true</c> if [is number type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsNumericType(System.Type,System.Boolean)">
            <summary>
            Determines whether [is numeric type] (long, int, short, byte, float, double or decimal).
            </summary>
            <param name="type">The type.</param>
            <param name="includeNullables">Include nullable types.</param>
            <returns>
              <c>true</c> if [is numeric type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsFloatingPointNumberType(System.Type,System.Boolean)">
            <summary>
            Determines whether [is floating point number type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="includeNullables">Include nullable types.</param>
            <returns>
              <c>true</c> if [is floating point number type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.GetType(System.Object)">
            <summary>
            Gets the type of the object.
            </summary>
            <param name="object">The @object.</param>
            <returns>type.</returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.GetType``1(``0)">
            <summary>
            Gets the type.
            </summary>
            <typeparam name="TType">The type.</typeparam>
            <param name="object">The object.</param>
            <returns>type.</returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.GetDefaultValue(System.Object)">
            <summary>
            Gets the default value of the object.
            </summary>
            <param name="object">The @object.</param>
            <returns>default value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.GetDefaultValueOfType(System.Type)">
            <summary>
            Gets the default value of the type.
            </summary>
            <param name="type">The type.</param>
            <returns>default value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labo.Common.Utils.TypeUtils.IsReferenceType(System.Type)">
            <summary>
            Determines whether [is reference type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is reference type] [the specified type]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="T:Labo.Common.Utils.WebRequestUtils">
            <summary>
            Web request utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.GetData(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the data.
            </summary>
            <param name="uri">The URI.</param>
            <param name="method">The method.</param>
            <param name="headers">The headers.</param>
            <returns>response data.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.GetData(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the data.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="headers">The headers.</param>
            <returns>response data.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.PostData(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Posts the data.
            </summary>
            <param name="uri">The URI.</param>
            <param name="data">The data.</param>
            <returns>response data.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.PostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Posts the data.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The data.</param>
            <returns>response data.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.PostString(System.Uri,System.String)">
            <summary>
            Posts the string.
            </summary>
            <param name="uri">The URI.</param>
            <param name="data">The data.</param>
            <returns>response data.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.PostString(System.String,System.String)">
            <summary>
            Posts the string.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The data.</param>
            <returns>response data.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.DownloadData(System.Uri)">
            <summary>
            Downloads the data.
            </summary>
            <param name="uri">The URI.</param>
            <returns>data as byte array.</returns>
        </member>
        <member name="M:Labo.Common.Utils.WebRequestUtils.DownloadData(System.String)">
            <summary>
            Downloads the data.
            </summary>
            <param name="url">The URL.</param>
            <returns>data as byte array.</returns>
        </member>
        <member name="T:Labo.Common.Utils.XmlUtils">
            <summary>
            Xml utility class.
            </summary>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.GetNodeAttributeValue``1(System.Xml.XmlNode,System.String,``0,System.Globalization.CultureInfo)">
            <summary>
            Gets the node attribute value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">The default value.</param>
            <param name="culture">The culture.</param>
            <returns>The node attribute value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.GetNodeAttributeValue``1(System.Xml.XmlNode,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the node attribute value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="culture">The culture.</param>
            <returns>The node attribute value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.GetNodeAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets the node attribute value.
            </summary>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The node attribute value.</returns>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.AppendAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Appends the attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>appended attribute.</returns>
            <exception cref="T:System.ArgumentNullException">
            element
            or
            value
            </exception>
            <exception cref="T:Labo.Common.Utils.Exceptions.XmlUtilsException">element.OwnerDocument and element.Attributes connot be null.</exception>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.AppendToNode(System.Xml.XmlNode,System.String)">
            <summary>
            Creates a new XmlNode node with the name specified and appends to the parent.
            </summary>
            <param name="node">Parent node.</param>
            <param name="childNodeName">Name of the newly created xml node.</param>
            <returns>Returns the created new child node.</returns>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.AppendToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Appends to node.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <param name="childNodeName">Name of the child node.</param>
            <returns>Appended node.</returns>
            <exception cref="T:System.ArgumentNullException">
            xmlDocument
            or
            childNodeName
            </exception>
        </member>
        <member name="M:Labo.Common.Utils.XmlUtils.TryGetNodeAttributeValue(System.Xml.XmlNode,System.String,System.String@)">
            <summary>
            Tries the get node attribute value.
            </summary>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if finds attribute value else <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            node
            or
            propertyName
            </exception>
        </member>
    </members>
</doc>
